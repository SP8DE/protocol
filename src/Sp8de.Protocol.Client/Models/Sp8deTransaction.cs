// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sp8de.Protocol.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Sp8deTransaction
    {
        /// <summary>
        /// Initializes a new instance of the Sp8deTransaction class.
        /// </summary>
        public Sp8deTransaction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Sp8deTransaction class.
        /// </summary>
        /// <param name="type">Possible values include: 'Simple',
        /// 'AggregatedCommit', 'AggregatedReveal', 'InternalContributor',
        /// 'InternalRequester', 'InternalValidator', 'System'</param>
        /// <param name="status">Possible values include: 'New', 'Pending',
        /// 'Expired', 'Failed', 'Confirmed'</param>
        public Sp8deTransaction(string id = default(string), string type = default(string), string signer = default(string), string signature = default(string), string requester = default(string), string status = default(string), string dependsOn = default(string), long? timestamp = default(long?), long? expiration = default(long?), long? compleatedAt = default(long?), long? fee = default(long?), IList<Anchor> anchors = default(IList<Anchor>), TransactionData inputData = default(TransactionData), TransactionData outputData = default(TransactionData), string internalRoot = default(string), IList<InternalTransaction> internalTransactions = default(IList<InternalTransaction>), TransactionMeta meta = default(TransactionMeta))
        {
            Id = id;
            Type = type;
            Signer = signer;
            Signature = signature;
            Requester = requester;
            Status = status;
            DependsOn = dependsOn;
            Timestamp = timestamp;
            Expiration = expiration;
            CompleatedAt = compleatedAt;
            Fee = fee;
            Anchors = anchors;
            InputData = inputData;
            OutputData = outputData;
            InternalRoot = internalRoot;
            InternalTransactions = internalTransactions;
            Meta = meta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Simple', 'AggregatedCommit',
        /// 'AggregatedReveal', 'InternalContributor', 'InternalRequester',
        /// 'InternalValidator', 'System'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signer")]
        public string Signer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signature")]
        public string Signature { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requester")]
        public string Requester { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'New', 'Pending', 'Expired',
        /// 'Failed', 'Confirmed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dependsOn")]
        public string DependsOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public long? Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expiration")]
        public long? Expiration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "compleatedAt")]
        public long? CompleatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fee")]
        public long? Fee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "anchors")]
        public IList<Anchor> Anchors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputData")]
        public TransactionData InputData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outputData")]
        public TransactionData OutputData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalRoot")]
        public string InternalRoot { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalTransactions")]
        public IList<InternalTransaction> InternalTransactions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public TransactionMeta Meta { get; set; }

    }
}
