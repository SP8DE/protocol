// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sp8de.Protocol.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ProtocolTransaction
    {
        /// <summary>
        /// Initializes a new instance of the ProtocolTransaction class.
        /// </summary>
        public ProtocolTransaction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProtocolTransaction class.
        /// </summary>
        /// <param name="type">Possible values include: 'Simple',
        /// 'AggregatedCommit', 'AggregatedReveal', 'InternalContributor',
        /// 'InternalRequester', 'InternalValidator', 'System'</param>
        public ProtocolTransaction(string type = default(string), IList<SignedItem> items = default(IList<SignedItem>), string dependsOn = default(string), RandomSettings randomSettings = default(RandomSettings), IDictionary<string, IList<string>> extended = default(IDictionary<string, IList<string>>))
        {
            Type = type;
            Items = items;
            DependsOn = dependsOn;
            RandomSettings = randomSettings;
            Extended = extended;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Simple', 'AggregatedCommit',
        /// 'AggregatedReveal', 'InternalContributor', 'InternalRequester',
        /// 'InternalValidator', 'System'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<SignedItem> Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dependsOn")]
        public string DependsOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "randomSettings")]
        public RandomSettings RandomSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extended")]
        public IDictionary<string, IList<string>> Extended { get; set; }

    }
}
