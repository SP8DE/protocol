// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sp8de.Protocol.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Sp8deAPI.
    /// </summary>
    public static partial class Sp8deAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NodeInfo> ApiNodesGet(this ISp8deAPI operations)
            {
                return operations.ApiNodesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NodeInfo>> ApiNodesGetAsync(this ISp8deAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiNodesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string ApiPingGet(this ISp8deAPI operations)
            {
                return operations.ApiPingGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiPingGetAsync(this ISp8deAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTransactionByIdGet(this ISp8deAPI operations, string id)
            {
                operations.ApiTransactionByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTransactionByIdGetAsync(this ISp8deAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTransactionByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object ApiTransactionCommitPost(this ISp8deAPI operations, ProtocolTransaction request = default(ProtocolTransaction))
            {
                return operations.ApiTransactionCommitPostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionCommitPostAsync(this ISp8deAPI operations, ProtocolTransaction request = default(ProtocolTransaction), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionCommitPostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object ApiTransactionRevealPost(this ISp8deAPI operations, ProtocolTransaction request = default(ProtocolTransaction))
            {
                return operations.ApiTransactionRevealPostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionRevealPostAsync(this ISp8deAPI operations, ProtocolTransaction request = default(ProtocolTransaction), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionRevealPostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
